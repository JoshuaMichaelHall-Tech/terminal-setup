#!/usr/bin/env ruby
# Zsh Configuration Troubleshooter
# Author: Joshua Michael Hall
# License: MIT
# Date: April 4, 2025

require 'fileutils'
require 'open3'
require 'optparse'

# Color definitions
class String
  def colorize(color_code)
    "\e[#{color_code}m#{self}\e[0m"
  end

  def green
    colorize(32)
  end

  def yellow
    colorize(33)
  end

  def red
    colorize(31)
  end

  def blue
    colorize(34)
  end
end

# Constants
HOME_DIR = ENV['HOME']
CONFIG_FILES = {
  zshrc: File.join(HOME_DIR, '.zshrc'),
  p10k: File.join(HOME_DIR, '.p10k.zsh')
}
OH_MY_ZSH_DIR = File.join(HOME_DIR, '.oh-my-zsh')
P10K_THEME_DIR = File.join(OH_MY_ZSH_DIR, 'custom/themes/powerlevel10k')
ZSH_PLUGINS_DIR = File.join(OH_MY_ZSH_DIR, 'custom/plugins')
VERSION = '0.2.0'

# Options parsing
options = { fix: false, verbose: false }

OptionParser.new do |opts|
  opts.banner = "Usage: zsh_troubleshooter.rb [options]"
  
  opts.on("--fix", "Fix issues automatically") do
    options[:fix] = true
  end
  
  opts.on("--verbose", "Show detailed information") do
    options[:verbose] = true
  end
  
  opts.on("--help", "Show this help message") do
    puts opts
    exit
  end
end.parse!

# Helper Methods
def print_header(text)
  puts "\n#{"=" * 70}".blue
  puts "  #{text}".blue
  puts "#{"=" * 70}".blue
  puts
end

def command_exists?(command)
  system("command -v #{command} > /dev/null 2>&1")
end

def file_exists?(file)
  File.exist?(file)
end

def check_result(message, result = $?.success?)
  if result
    puts "✓ #{message}".green
    return true
  else
    puts "✗ #{message}".red
    return false
  end
end

def create_directory(dir)
  return true if Dir.exist?(dir)
  
  FileUtils.mkdir_p(dir)
  check_result("Created directory: #{dir}")
rescue StandardError => e
  puts "Error creating directory #{dir}: #{e.message}".red
  false
end

def create_file(file, content)
  create_directory(File.dirname(file))
  
  File.open(file, 'w') do |f|
    f.write(content)
  end
  check_result("Created file: #{file}")
rescue StandardError => e
  puts "Error creating file #{file}: #{e.message}".red
  false
end

def file_contains?(file, pattern)
  return false unless File.exist?(file)
  
  File.read(file) =~ Regexp.new(pattern)
end

def append_to_file(file, content)
  return false unless File.exist?(file)
  
  File.open(file, 'a') do |f|
    f.puts content
  end
  check_result("Updated file: #{file}")
rescue StandardError => e
  puts "Error updating file #{file}: #{e.message}".red
  false
end

def add_line_if_not_exists(file, line)
  return false unless File.exist?(file)
  return true if file_contains?(file, Regexp.escape(line))
  
  append_to_file(file, line)
end

def run_command(command)
  stdout, stderr, status = Open3.capture3(command)
  success = status.success?
  
  return [stdout, success]
rescue StandardError => e
  puts "Error running command '#{command}': #{e.message}".red
  return ["", false]
end

def create_backup(file)
  return true unless File.exist?(file)
  
  backup = "#{file}.bak.#{Time.now.strftime('%Y%m%d%H%M%S')}"
  FileUtils.cp(file, backup)
  puts "Created backup: #{backup}".green
  true
rescue StandardError => e
  puts "Failed to create backup for #{file}: #{e.message}".red
  false
end

def create_p10k_conf(file)
  content = <<~P10K
    # Generated by zsh_troubleshooter.rb
    # Config file for Powerlevel10k with minimal settings.
    # Wizard for this theme can be run by `p10k configure`.

    # Temporarily change options.
    'builtin' 'local' '-a' 'p10k_config_opts'
    [[ ! -o 'aliases'         ]] || p10k_config_opts+=('aliases')
    [[ ! -o 'sh_glob'         ]] || p10k_config_opts+=('sh_glob')
    [[ ! -o 'no_brace_expand' ]] || p10k_config_opts+=('no_brace_expand')
    'builtin' 'setopt' 'no_aliases' 'no_sh_glob' 'brace_expand'

    () {
      emulate -L zsh -o extended_glob

      # Unset all configuration options.
      unset -m '(POWERLEVEL9K_*|DEFAULT_USER)~POWERLEVEL9K_GITSTATUS_DIR'

      # Zsh >= 5.1.1 is required.
      [[ $ZSH_VERSION == (5.<1->*|<6->.*) ]] || return

      # Left prompt segments.
      typeset -g POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(
        dir                       # current directory
        vcs                       # git status
        prompt_char               # prompt symbol
      )

      # Right prompt segments.
      typeset -g POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(
        status                    # exit code of the last command
        command_execution_time    # duration of the last command
        background_jobs           # presence of background jobs
        virtualenv                # python virtual environment
        time                      # current time
      )

      # Basic style options
      typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VIINS_CONTENT_EXPANSION='❯'
      typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX=''
      typeset -g POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX=''
      
      # Install gitstatus plugin
      source ${0:A:h}/gitstatus/gitstatus.plugin.zsh || source /usr/local/opt/powerlevel10k/gitstatus/gitstatus.plugin.zsh || return
    }

    (( ${#p10k_config_opts} )) && setopt ${p10k_config_opts[@]}
    'builtin' 'unset' 'p10k_config_opts'
  P10K
  
  create_file(file, content)
end

# Troubleshooting functions
def check_zsh_installation
  print_header("Checking Zsh Installation")
  
  # Check if Zsh is installed
  if command_exists?('zsh')
    version, success = run_command('zsh --version')
    if success
      puts "✓ Zsh is installed: #{version.strip}".green
    else
      puts "✗ Zsh seems to be installed but version check failed".red
      return false
    end
  else
    puts "✗ Zsh is not installed".red
    if options[:fix]
      puts "Attempting to install Zsh...".blue
      if command_exists?('brew')
        run_command('brew install zsh')
        if command_exists?('zsh')
          puts "✓ Zsh installed successfully".green
        else
          puts "✗ Failed to install Zsh".red
          return false
        end
      else
        puts "✗ Cannot automatically install Zsh (Homebrew not found)".red
        puts "  Please install Zsh manually and run this script again".yellow
        return false
      end
    else
      puts "  Run with --fix to attempt installation, or install manually".yellow
      return false
    end
  end
  
  # Check if Zsh is the default shell
  current_shell = ENV['SHELL']
  if current_shell.include?('zsh')
    puts "✓ Zsh is the default shell: #{current_shell}".green
  else
    puts "✗ Zsh is not the default shell (current: #{current_shell})".yellow
    if options[:fix]
      puts "Attempting to set Zsh as default shell...".blue
      system("chsh -s $(which zsh)")
      if $?.success?
        puts "✓ Zsh set as default shell (will take effect after logout)".green
      else
        puts "✗ Failed to set Zsh as default shell".red
        puts "  Please run 'chsh -s $(which zsh)' manually".yellow
      end
    else
      puts "  Run with --fix to attempt setting Zsh as default, or run 'chsh -s $(which zsh)' manually".yellow
    end
  end
  
  true
end

def check_oh_my_zsh
  print_header("Checking Oh My Zsh")
  
  if Dir.exist?(OH_MY_ZSH_DIR)
    puts "✓ Oh My Zsh is installed".green
    return true
  else
    puts "✗ Oh My Zsh is not installed".red
    
    if options[:fix]
      puts "Attempting to install Oh My Zsh...".blue
      install_cmd = 'sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended'
      output, success = run_command(install_cmd)
      
      if success && Dir.exist?(OH_MY_ZSH_DIR)
        puts "✓ Oh My Zsh installed successfully".green
        return true
      else
        puts "✗ Failed to install Oh My Zsh".red
        puts "  Please install Oh My Zsh manually:".yellow
        puts "  sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"".yellow
        return false
      end
    else
      puts "  Run with --fix to attempt installation, or install manually".yellow
      return false
    end
  end
end

def check_powerlevel10k
  print_header("Checking Powerlevel10k Theme")
  
  if Dir.exist?(P10K_THEME_DIR)
    puts "✓ Powerlevel10k theme is installed".green
    theme_success = true
  else
    puts "✗ Powerlevel10k theme is not installed".red
    theme_success = false
    
    if options[:fix]
      puts "Attempting to install Powerlevel10k theme...".blue
      install_cmd = "git clone --depth=1 https://github.com/romkatv/powerlevel10k.git #{P10K_THEME_DIR}"
      output, success = run_command(install_cmd)
      
      if success && Dir.exist?(P10K_THEME_DIR)
        puts "✓ Powerlevel10k theme installed successfully".green
        theme_success = true
      else
        puts "✗ Failed to install Powerlevel10k theme".red
        puts "  Please install Powerlevel10k theme manually:".yellow
        puts "  git clone --depth=1 https://github.com/romkatv/powerlevel10k.git #{P10K_THEME_DIR}".yellow
      end
    else
      puts "  Run with --fix to attempt installation, or install manually".yellow
    end
  end
  
  # Check .zshrc for Powerlevel10k theme setting
  zshrc = CONFIG_FILES[:zshrc]
  if File.exist?(zshrc)
    if file_contains?(zshrc, "ZSH_THEME=[\"']powerlevel10k\\/powerlevel10k[\"']")
      puts "✓ Powerlevel10k theme is set in .zshrc".green
      zshrc_success = true
    else
      puts "✗ Powerlevel10k theme is not set in .zshrc".red
      zshrc_success = false
      
      if options[:fix]
        puts "Attempting to set Powerlevel10k theme in .zshrc...".blue
        
        # Create backup first
        create_backup(zshrc)
        
        # Update or add ZSH_THEME setting
        zshrc_content = File.read(zshrc)
        if zshrc_content =~ /ZSH_THEME=/
          # Replace existing ZSH_THEME line
          new_content = zshrc_content.gsub(/ZSH_THEME=.*$/, 'ZSH_THEME="powerlevel10k/powerlevel10k"')
          File.write(zshrc, new_content)
          puts "✓ Updated ZSH_THEME to powerlevel10k in .zshrc".green
        else
          # Add ZSH_THEME line
          add_line_if_not_exists(zshrc, 'ZSH_THEME="powerlevel10k/powerlevel10k"')
        end
        
        zshrc_success = true
      else
        puts "  Run with --fix to update .zshrc, or edit manually".yellow
      end
    end
  else
    puts "✗ .zshrc doesn't exist".red
    zshrc_success = false
    
    if options[:fix]
      puts "Creating basic .zshrc file...".blue
      # This will be handled by the check_config_files function
      zshrc_success = true
    else
      puts "  Run with --fix to create .zshrc, or create manually".yellow
    end
  end
  
  # Check for p10k.zsh configuration file
  p10k_conf = CONFIG_FILES[:p10k]
  if File.exist?(p10k_conf)
    puts "✓ Powerlevel10k configuration file (.p10k.zsh) exists".green
    p10k_success = true
  else
    puts "✗ Powerlevel10k configuration file (.p10k.zsh) doesn't exist".red
    p10k_success = false
    
    if options[:fix]
      puts "Creating basic Powerlevel10k configuration...".blue
      p10k_success = create_p10k_conf(p10k_conf)
    else
      puts "  Run with --fix to create configuration, or run 'p10k configure' manually".yellow
    end
  end
  
  # Check if .zshrc sources .p10k.zsh
  if File.exist?(zshrc)
    if file_contains?(zshrc, "source.*\\.p10k\\.zsh")
      puts "✓ .zshrc sources .p10k.zsh".green
      source_success = true
    else
      puts "✗ .zshrc doesn't source .p10k.zsh".red
      source_success = false
      
      if options[:fix]
        puts "Adding p10k source line to .zshrc...".blue
        add_line_if_not_exists(zshrc, '[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh')
        source_success = true
      else
        puts "  Run with --fix to update .zshrc, or edit manually".yellow
      end
    end
  else
    puts "✗ .zshrc doesn't exist".red
    source_success = false
  end
  
  theme_success && zshrc_success && p10k_success && source_success
end

def check_zsh_plugins
  print_header("Checking Zsh Plugins")
  
  required_plugins = {
    'zsh-autosuggestions' => 'https://github.com/zsh-users/zsh-autosuggestions',
    'zsh-syntax-highlighting' => 'https://github.com/zsh-users/zsh-syntax-highlighting.git'
  }
  
  all_plugins_ok = true
  
  # Check each required plugin
  required_plugins.each do |plugin_name, repo_url|
    plugin_dir = File.join(ZSH_PLUGINS_DIR, plugin_name)
    
    if Dir.exist?(plugin_dir)
      puts "✓ Plugin #{plugin_name} is installed".green
    else
      puts "✗ Plugin #{plugin_name} is not installed".red
      all_plugins_ok = false
      
      if options[:fix]
        puts "Attempting to install #{plugin_name}...".blue
        install_cmd = "git clone #{repo_url} #{plugin_dir}"
        output, success = run_command(install_cmd)
        
        if success && Dir.exist?(plugin_dir)
          puts "✓ Plugin #{plugin_name} installed successfully".green
        else
          puts "✗ Failed to install plugin #{plugin_name}".red
          puts "  Please install manually with:".yellow
          puts "  #{install_cmd}".yellow
        end
      else
        puts "  Run with --fix to attempt installation, or install manually".yellow
      end
    end
  end
  
  # Check if plugins are enabled in .zshrc
  zshrc = CONFIG_FILES[:zshrc]
  if File.exist?(zshrc)
    zshrc_content = File.read(zshrc)
    
    if zshrc_content.match?(/plugins=\(.*zsh-autosuggestions.*\)/) && 
       zshrc_content.match?(/plugins=\(.*zsh-syntax-highlighting.*\)/)
      puts "✓ Required plugins are enabled in .zshrc".green
    else
      puts "✗ Required plugins are not enabled in .zshrc".red
      all_plugins_ok = false
      
      if options[:fix]
        puts "Attempting to enable required plugins in .zshrc...".blue
        
        # Create backup first
        create_backup(zshrc)
        
        # Check if plugins section exists
        if zshrc_content.match?(/plugins=\(.*\)/)
          # Update existing plugins line to add our plugins
          plugins_line = zshrc_content.match(/plugins=\((.*)\)/)[0]
          missing_plugins = []
          
          missing_plugins << 'zsh-autosuggestions' unless plugins_line.include?('zsh-autosuggestions')
          missing_plugins << 'zsh-syntax-highlighting' unless plugins_line.include?('zsh-syntax-highlighting')
          
          if !missing_plugins.empty?
            # Add missing plugins to the plugins line
            new_plugins_line = plugins_line.gsub(/plugins=\((.*)\)/) do |match|
              plugins_list = $1.strip
              plugins_list += ' ' unless plugins_list.empty?
              plugins_list += missing_plugins.join(' ')
              "plugins=(#{plugins_list})"
            end
            
            # Replace old plugins line with new one
            new_zshrc_content = zshrc_content.gsub(plugins_line, new_plugins_line)
            File.write(zshrc, new_zshrc_content)
            puts "✓ Updated plugins line in .zshrc".green
          end
        else
          # Add a new plugins line
          add_line_if_not_exists(zshrc, "plugins=(git zsh-autosuggestions zsh-syntax-highlighting)")
          puts "✓ Added plugins line to .zshrc".green
        end
      else
        puts "  Run with --fix to update .zshrc, or edit manually".yellow
      end
    end
  else
    puts "✗ .zshrc doesn't exist".red
    all_plugins_ok = false
  end
  
  all_plugins_ok
end

def check_config_files
  print_header("Checking Configuration Files")
  
  all_files_ok = true
  
  # Check all required config files
  CONFIG_FILES.each do |name, file|
    if File.exist?(file)
      puts "✓ #{name} configuration file exists: #{file}".green
    else
      puts "✗ #{name} configuration file doesn't exist: #{file}".red
      all_files_ok = false
      
      if options[:fix]
        puts "Creating #{name} configuration file...".blue
        
        case name
        when :zshrc
          # Create a minimal .zshrc file
          minimal_zshrc = <<~ZSHRC
            # Generated by zsh_troubleshooter.rb
            
            # Path to Oh My Zsh installation
            export ZSH="$HOME/.oh-my-zsh"
            
            # Theme
            ZSH_THEME="powerlevel10k/powerlevel10k"
            
            # Plugins
            plugins=(
              git
              zsh-autosuggestions
              zsh-syntax-highlighting
            )
            
            source $ZSH/oh-my-zsh.sh
            
            # To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
            [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
          ZSHRC
          
          create_file(file, minimal_zshrc)
        when :p10k
          # Create a minimal p10k configuration
          create_p10k_conf(file)
        end
      else
        puts "  Run with --fix to create missing files, or create manually".yellow
      end
    end
  end
  
  all_files_ok
end

def check_aliases
  print_header("Checking Zsh Aliases")
  
  # Common aliases to check
  required_aliases = {
    'gs' => 'git status',
    'ga' => 'git add',
    'gc' => 'git commit -m',
    'gp' => 'git push',
    'gl' => 'git pull',
    '..' => 'cd ..',
    '...' => 'cd ../..',
    '....' => 'cd ../../..',
    'll' => 'ls -la',
    'la' => 'ls -a',
    'v' => 'nvim',
    'vi' => 'nvim',
    'vim' => 'nvim',
    'ta' => 'tmux attach -t',
    'tls' => 'tmux list-sessions',
    'tn' => 'tmux new -s',
    'tk' => 'tmux kill-session -t',
    'dev' => 'tmux attach -t dev || tmux new -s dev',
    'notes' => 'tmux attach -t notes || tmux new -s notes'
  }
  
  zshrc = CONFIG_FILES[:zshrc]
  if !File.exist?(zshrc)
    puts "Cannot check aliases: .zshrc doesn't exist".red
    return false
  end
  
  zshrc_content = File.read(zshrc)
  missing_aliases = []
  
  required_aliases.each do |alias_name, command|
    pattern = "alias\\s+#{alias_name}\\s*="
    if !zshrc_content.match?(Regexp.new(pattern))
      missing_aliases << [alias_name, command]
    end
  end
  
  if missing_aliases.empty?
    puts "✓ All required aliases are present in .zshrc".green
    return true
  else
    puts "✗ Missing aliases in .zshrc:".yellow
    missing_aliases.each do |alias_name, command|
      puts "  - #{alias_name}: #{command}".yellow
    end
    
    if options[:fix]
      puts "Adding missing aliases to .zshrc...".blue
      
      # Create backup first
      create_backup(zshrc)
      
      # Add a section header if not already present
      if !zshrc_content.include?("# ============ Aliases ============")
        append_to_file(zshrc, "\n# ============ Aliases ============")
      end
      
      # Add each missing alias
      missing_aliases.each do |alias_name, command|
        append_to_file(zshrc, "alias #{alias_name}='#{command}'")
      end
      
      return true
    else
      puts "  Run with --fix to add missing aliases, or add manually".yellow
      return false
    end
  end
end

def check_functions
  print_header("Checking Zsh Functions")
  
  # Required functions to check
  required_functions = %w[mcd nvimf check-functions wk]
  
  zshrc = CONFIG_FILES[:zshrc]
  if !File.exist?(zshrc)
    puts "Cannot check functions: .zshrc doesn't exist".red
    return false
  end
  
  zshrc_content = File.read(zshrc)
  missing_functions = []
  
  required_functions.each do |function_name|
    pattern = "function\\s+#{function_name}\\s*\\(|#{function_name}\\s*\\(\\s*\\)"
    if !zshrc_content.match?(Regexp.new(pattern))
      missing_functions << function_name
    end
  end
  
  if missing_functions.empty?
    puts "✓ All required functions are present in .zshrc".green
    return true
  else
    puts "✗ Missing functions in .zshrc:".yellow
    missing_functions.each do |function_name|
      puts "  - #{function_name}".yellow
    end
    
    if options[:fix]
      puts "Adding missing functions to .zshrc...".blue
      
      # Create backup first
      create_backup(zshrc)
      
      # Add a section header if not already present
      if !zshrc_content.include?("# ============ Functions ============")
        append_to_file(zshrc, "\n# ============ Functions ============")
      end
      
      # Define function content based on function name
      missing_functions.each do |function_name|
        case function_name
        when 'mcd'
          function_code = <<~FUNC
            # Create and change to directory in one command
            mcd() {
              mkdir -p "$1" && cd "$1"
            }
          FUNC
          append_to_file(zshrc, "\n#{function_code}")
          
        when 'nvimf'
          function_code = <<~FUNC
            # Find and open file with Neovim
            nvimf() {
              local file
              file=$(find . -name "*$1*" | fzf)
              if [[ -n "$file" ]]; then
                nvim "$file"
              fi
            }
          FUNC
          append_to_file(zshrc, "\n#{function_code}")
          
        when 'check-functions'
          function_code = <<~FUNC
            # Check if functions are properly loaded
            check-functions() {
              echo "Testing key functions..."
              declare -f mcd > /dev/null && echo "✓ mcd (make directory and cd) function is available" || echo "✗ mcd function is not available"
              declare -f nvimf > /dev/null && echo "✓ nvimf (find and edit with neovim) function is available" || echo "✗ nvimf function is not available"
              declare -f wk > /dev/null && echo "✓ wk (session manager) function is available" || echo "✗ wk function is not available"
            }
          FUNC
          append_to_file(zshrc, "\n#{function_code}")
          
        when 'wk'
          function_code = <<~FUNC
            # Unified session manager for both dev and notes
            wk() {
              local session=$1
              
              case "$session" in
                dev)
                  if ! tmux has-session -t dev 2>/dev/null; then
                    # Create development session with windows for code, server, and git
                    tmux new-session -d -s dev -n code
                    tmux new-window -t dev:1 -n server
                    tmux new-window -t dev:2 -n git
                    tmux select-window -t dev:0
                  fi
                  tmux attach -t dev
                  ;;
                notes)
                  if ! tmux has-session -t notes 2>/dev/null; then
                    # Create notes session with windows for main, daily, projects, and learning
                    tmux new-session -d -s notes -n main -c ~/notes
                    tmux new-window -t notes:1 -n daily -c ~/notes/daily
                    tmux new-window -t notes:2 -n projects -c ~/notes/projects
                    tmux new-window -t notes:3 -n learning -c ~/notes/learning
                    tmux select-window -t notes:0
                  fi
                  tmux attach -t notes
                  ;;
                *)
                  echo "Usage: wk [dev|notes]"
                  echo "  dev   - Start or resume development session"
                  echo "  notes - Start or resume notes session"
                  ;;
              esac
            }
          FUNC
          append_to_file(zshrc, "\n#{function_code}")
        end
      end
      
      return true
    else
      puts "  Run with --fix to add missing functions, or add manually".yellow
      return false
    end
  end
end

def check_settings
  print_header("Checking Zsh Settings")
  
  zshrc = CONFIG_FILES[:zshrc]
  if !File.exist?(zshrc)
    puts "Cannot check settings: .zshrc doesn't exist".red
    return false
  end
  
  zshrc_content = File.read(zshrc)
  required_settings = {
    'AUTO_PUSHD' => 'setopt AUTO_PUSHD',
    'PUSHD_IGNORE_DUPS' => 'setopt PUSHD_IGNORE_DUPS',
    'PUSHD_SILENT' => 'setopt PUSHD_SILENT',
    'EXTENDED_GLOB' => 'setopt EXTENDED_GLOB',
    'AUTO_CD' => 'setopt AUTO_CD'
  }
  
  missing_settings = []
  required_settings.each do |setting, line|
    if !zshrc_content.match?(/setopt\s+#{setting}/) && !zshrc_content.match?(/setopt.*#{setting}/)
      missing_settings << line
    end
  end
  
  if missing_settings.empty?
    puts "✓ All required Zsh settings are present in .zshrc".green
    return true
  else
    puts "✗ Missing Zsh settings in .zshrc:".yellow
    missing_settings.each do |setting|
      puts "  - #{setting}".yellow
    end
    
    if options[:fix]
      puts "Adding missing Zsh settings to .zshrc...".blue
      
      # Create backup first
      create_backup(zshrc)
      
      # Add a section header if not already present
      if !zshrc_content.include?("# ============ Zsh-specific settings ============")
        append_to_file(zshrc, "\n# ============ Zsh-specific settings ============")
      end
      
      # Add each missing setting
      missing_settings.each do |setting|
        append_to_file(zshrc, setting)
      end
      
      return true
    else
      puts "  Run with --fix to add missing settings, or add manually".yellow
      return false
    end
  end
end

# Main function
def main
  print_header("Zsh Configuration Troubleshooter v#{VERSION}")
  
  # Collect issues
  issues = []
  
  # Check Zsh installation
  puts "Checking Zsh installation...".blue
  zsh_ok = check_zsh_installation
  issues << "Zsh installation" unless zsh_ok
  
  # Check Oh My Zsh
  puts "Checking Oh My Zsh...".blue
  oh_my_zsh_ok = check_oh_my_zsh
  issues << "Oh My Zsh" unless oh_my_zsh_ok
  
  # Check Powerlevel10k
  puts "Checking Powerlevel10k...".blue
  p10k_ok = check_powerlevel10k
  issues << "Powerlevel10k" unless p10k_ok
  
  # Check Zsh plugins
  puts "Checking Zsh plugins...".blue
  plugins_ok = check_zsh_plugins
  issues << "Zsh plugins" unless plugins_ok
  
  # Check configuration files
  puts "Checking configuration files...".blue
  config_ok = check_config_files
  issues << "Configuration files" unless config_ok
  
  # Check aliases
  puts "Checking aliases...".blue
  aliases_ok = check_aliases
  issues << "Aliases" unless aliases_ok
  
  # Check functions
  puts "Checking functions...".blue
  functions_ok = check_functions
  issues << "Functions" unless functions_ok
  
  # Check settings
  puts "Checking Zsh settings...".blue
  settings_ok = check_settings
  issues << "Zsh settings" unless settings_ok
  
  # Final report
  print_header("Troubleshooting Summary")
  
  if issues.empty?
    puts "✓ All Zsh components are installed and configured correctly".green
  else
    puts "✗ Issues found in the following areas:".red
    issues.each_with_index do |issue, index|
      puts "  #{index + 1}. #{issue}".yellow
    end
    
    if options[:fix]
      puts "\nAttempted to fix all issues. Please check the output above for any remaining problems.".blue
      puts "You may need to restart your terminal or run 'source ~/.zshrc' for changes to take effect.".blue
    else
      puts "\nRun this script with --fix option to attempt automatic fixes for these issues.".blue
    end
  end
  
  # Return success if no issues or all issues fixed
  issues.empty?
end

# Run the script
exit main ? 0 : 1